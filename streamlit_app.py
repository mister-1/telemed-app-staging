"""
Telemedicine Transactions Dashboard
----------------------------------

Stack:
- Frontend: Streamlit (pastel UI), Plotly Express charts (with data labels)
- Backend DB: Supabase (Postgres). Single source of truth for everyone with the link.
- Auth: Admin login (default: telemed / Telemed@DHI). Passwords stored hashed (bcrypt).

How to deploy (summary):
1) Create a free Supabase project ‚ûú copy SUPABASE_URL and SUPABASE_ANON_KEY.
2) In SQL editor, run the SCHEMA below (--- SCHEMA --- section) to create tables and policies.
3) Deploy this app to Streamlit Cloud or any server. Set environment variables:
   SUPABASE_URL, SUPABASE_KEY (use the ANON key for simplicity) and APP_SECRET.
4) Open the app ‚ûú Admin ‚ûú login (telemed / Telemed@DHI) ‚ûú manage hospitals & transactions.

Note: This single file contains the app code. At the very bottom you‚Äôll find:
- --- SCHEMA ---: SQL you run once in Supabase
- --- TH_PROVINCES ---: Province‚ÜíRegion mapping
"""

import os
import uuid
import json
import bcrypt
import pandas as pd
import plotly.express as px
from datetime import date, datetime, timedelta
from typing import List, Dict, Any

import streamlit as st
from supabase import create_client, Client

# =========================
# ---------- THEME --------
# =========================
# Pastel styling via CSS + Plotly template tweaks
PASTEL_BG = "#F7F8FB"
PASTEL_CARD = "#FFFFFF"
PASTEL_ACCENT = "#A7C7E7"   # soft baby blue
PASTEL_ACCENT_2 = "#F8C8DC" # soft pink
PASTEL_ACCENT_3 = "#B6E2D3" # mint
PASTEL_TEXT = "#3E4B6D"

st.set_page_config(
    page_title="Telemedicine Transactions",
    page_icon="üìä",
    layout="wide",
)

st.markdown(
    f"""
    <style>
      .stApp {{ background-color: {PASTEL_BG}; }}
      .stButton>button {{
          background: linear-gradient(135deg, {PASTEL_ACCENT}, {PASTEL_ACCENT_3});
          color: {PASTEL_TEXT};
          border: none; border-radius: 14px; padding: 0.6rem 1rem; font-weight: 600;
          box-shadow: 0 4px 12px rgba(0,0,0,0.05);
      }}
      .stTextInput>div>div>input, .stNumberInput>div>div>input, .stSelectbox>div>div>div {{
          background: {PASTEL_CARD}; color: {PASTEL_TEXT}; border-radius: 12px;
      }}
      .css-1d391kg, .e1f1d6gn2 {{ color: {PASTEL_TEXT}; }}
      .metric-card {{ background: {PASTEL_CARD}; padding: 1rem; border-radius: 16px; box-shadow: 0 1px 8px rgba(0,0,0,0.05); }}
    </style>
    """,
    unsafe_allow_html=True,
)

# =========================
# ---- ENV & CONNECTION ----
# =========================
SUPABASE_URL = os.getenv("SUPABASE_URL", "")
SUPABASE_KEY = os.getenv("SUPABASE_KEY", "")
APP_SECRET = os.getenv("APP_SECRET", "replace-me").encode()

@st.cache_resource(show_spinner=False)
def get_client() -> Client:
    if not SUPABASE_URL or not SUPABASE_KEY:
        st.error("‚ùå Missing SUPABASE_URL or SUPABASE_KEY environment variable.")
        st.stop()
    return create_client(SUPABASE_URL, SUPABASE_KEY)

sb: Client = get_client()

# =========================
# ------- CONSTANTS --------
# =========================
SITE_CONTROL_CHOICES = ["‡∏ó‡∏µ‡∏°‡πÉ‡∏ï‡πâ", "‡∏ó‡∏µ‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡∏≠", "‡∏ó‡∏µ‡∏°‡∏≠‡∏µ‡∏™‡∏≤‡∏ô"]
SYSTEM_CHOICES = ["HOSxpV4", "HOSxpV3", "WebPortal"]
SERVICE_MODEL_CHOICES = ["Rider", "App", "Station to Station"]

# Province ‚ûú Region mapping (Thai). See the full mapping at the bottom.
from collections import OrderedDict
TH_PROVINCES: Dict[str, str] = OrderedDict(json.loads('''
{
  "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ","‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á","‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å","‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô",
  "‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å","‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å",
  "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å","‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á","‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏ä‡∏∏‡∏°‡∏û‡∏£":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ",
  "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡∏ï‡∏£‡∏±‡∏á":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ","‡∏ï‡∏£‡∏≤‡∏î":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å",
  "‡∏ï‡∏≤‡∏Å":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å","‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á","‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á","‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô",
  "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ","‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á",
  "‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ","‡∏ô‡πà‡∏≤‡∏ô":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô",
  "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á","‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å","‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å","‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ",
  "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á","‡∏û‡∏∞‡πÄ‡∏¢‡∏≤":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡∏û‡∏±‡∏á‡∏á‡∏≤":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ","‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ",
  "‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å","‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠",
  "‡πÅ‡∏û‡∏£‡πà":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ","‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô",
  "‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡∏¢‡∏∞‡∏•‡∏≤":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ","‡∏¢‡πÇ‡∏™‡∏ò‡∏£":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô",
  "‡∏£‡∏∞‡∏ô‡∏≠‡∏á":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ","‡∏£‡∏∞‡∏¢‡∏≠‡∏á":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å","‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å","‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á",
  "‡∏•‡∏≥‡∏õ‡∏≤‡∏á":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡∏•‡∏≥‡∏û‡∏π‡∏ô":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡πÄ‡∏•‡∏¢":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô",
  "‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏™‡∏á‡∏Ç‡∏•‡∏≤":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ","‡∏™‡∏ï‡∏π‡∏•":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ","‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á",
  "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á","‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á","‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß":"‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å","‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á",
  "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á","‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á","‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ":"‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ",
  "‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á",
  "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô","‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå":"‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠","‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á",
  "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ":"‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô"
}
'''))
REGION_CHOICES = sorted(list(set(TH_PROVINCES.values())))

# =========================
# -------- HELPERS ---------
# =========================
def hash_pw(pw: str) -> str:
    return bcrypt.hashpw(pw.encode(), bcrypt.gensalt()).decode()

def verify_pw(pw: str, hashed: str) -> bool:
    try:
        return bcrypt.checkpw(pw.encode(), hashed.encode())
    except Exception:
        return False

@st.cache_data(ttl=60, show_spinner=False)
def load_df(table: str) -> pd.DataFrame:
    data = sb.table(table).select("*").execute().data
    return pd.DataFrame(data)

def reload_all():
    load_df.clear()
    st.experimental_rerun()

# Ensure default admin exists
def ensure_default_admin():
    admins = sb.table("admins").select("username").eq("username", "telemed").execute().data
    if not admins:
        sb.table("admins").insert({
            "id": str(uuid.uuid4()),
            "username": "telemed",
            "password_hash": hash_pw("Telemed@DHI")
        }).execute()

ensure_default_admin()

# =========================
# ---------- AUTH ----------
# =========================
if "auth" not in st.session_state:
    st.session_state["auth"] = {"ok": False, "user": None}

with st.sidebar:
    st.markdown("## üîê Admin Login")
    if not st.session_state.auth["ok"]:
        with st.form("login_form", clear_on_submit=False):
            u = st.text_input("Username", value="")
            p = st.text_input("Password", type="password", value="")
            submitted = st.form_submit_button("Login")
        if submitted:
            rows = sb.table("admins").select("*").eq("username", u).execute().data
            if rows and verify_pw(p, rows[0]["password_hash"]):
                st.session_state.auth = {"ok": True, "user": rows[0]["username"]}
                st.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.experimental_rerun()
            else:
                st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        st.write(f"‚úÖ Logged in as **{st.session_state.auth['user']}**")
        if st.button("Logout"):
            st.session_state.auth = {"ok": False, "user": None}
            st.experimental_rerun()

# =========================
# --------- FILTERS --------
# =========================
colF1, colF2, colF3 = st.columns([1,1,2])
with colF1:
    hospitals_df = load_df("hospitals")
    hospital_names = ["(‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)"] + sorted(hospitals_df.get("name", pd.Series(dtype=str)).dropna().unique().tolist())
    selected_hospital = st.selectbox("‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", hospital_names)
with colF2:
    today = date.today()
    start_default = today - timedelta(days=30)
    date_range = st.date_input("‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=(start_default, today))
    if isinstance(date_range, tuple):
        start_date, end_date = date_range
    else:
        start_date, end_date = (start_default, today)
with colF3:
    site_filter = st.multiselect("‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ (SiteControl)", SITE_CONTROL_CHOICES)

# =========================
# ------ DATA & LOGIC ------
# =========================
transactions_df = load_df("transactions")
if not transactions_df.empty:
    # filter by date
    transactions_df["date"] = pd.to_datetime(transactions_df["date"]).dt.date
    mask = (transactions_df["date"] >= start_date) & (transactions_df["date"] <= end_date)
    transactions_df = transactions_df.loc[mask].copy()

# join hospitals
if not hospitals_df.empty and not transactions_df.empty:
    merged = transactions_df.merge(hospitals_df, left_on="hospital_id", right_on="id", how="left", suffixes=("", "_h"))
else:
    merged = pd.DataFrame(columns=["date","hospital_id","transactions_count","riders_active","name","site_control","province","region","riders_count"])

# extra filters
if selected_hospital != "(‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)":
    merged = merged.loc[merged["name"] == selected_hospital]
if site_filter:
    merged = merged.loc[merged["site_control"].isin(site_filter)]

# =========================
# ---------- KPIs ----------
# =========================
st.markdown("### üìà ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° (Overview)")
colK1, colK2, colK3, colK4 = st.columns(4)

total_tx = int(merged["transactions_count"].sum()) if not merged.empty else 0
unique_h = merged["hospital_id"].nunique() if not merged.empty else 0
sum_riders_active = int(merged["riders_active"].sum()) if not merged.empty else 0
sum_riders_capacity = int(merged["riders_count"].sum()) if not merged.empty else 0

with colK1:
    st.markdown(f"<div class='metric-card'><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</b><h2>{total_tx:,}</h2></div>", unsafe_allow_html=True)
with colK2:
    st.markdown(f"<div class='metric-card'><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</b><h2>{unique_h}</h2></div>", unsafe_allow_html=True)
with colK3:
    st.markdown(f"<div class='metric-card'><b>Rider Active (‡∏£‡∏ß‡∏°)</b><h2>{sum_riders_active:,}</h2></div>", unsafe_allow_html=True)
with colK4:
    st.markdown(f"<div class='metric-card'><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Rider (Capacity)</b><h2>{sum_riders_capacity:,}</h2></div>", unsafe_allow_html=True)

# =========================
# --------- CHARTS ---------
# =========================
if merged.empty:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Admin ‚ûú ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
else:
    # 1) By SiteControl (‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ)
    st.markdown("#### ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ")
    grp_site = merged.groupby("site_control").agg({
        "transactions_count":"sum",
        "riders_active":"sum",
        "riders_count":"sum"
    }).reset_index()
    fig1 = px.bar(grp_site, x="site_control", y="transactions_count", text="transactions_count",
                  labels={"site_control":"‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ","transactions_count":"Transactions"})
    fig1.update_traces(textposition='outside')
    st.plotly_chart(fig1, use_container_width=True)

    # 2) Per Hospital (total in range)
    st.markdown("#### ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)")
    grp_h = merged.groupby("name").agg({
        "transactions_count":"sum",
        "riders_active":"sum",
        "riders_count":"sum"
    }).reset_index().sort_values("transactions_count", ascending=False)
    fig2 = px.bar(grp_h, x="name", y="transactions_count", text="transactions_count",
                  labels={"name":"‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•","transactions_count":"Transactions"})
    fig2.update_traces(textposition='outside')
    st.plotly_chart(fig2, use_container_width=True)

    # 3) Daily trend (selected filter)
    st.markdown("#### ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    daily = merged.groupby("date").agg({"transactions_count":"sum","riders_active":"sum"}).reset_index()
    fig3 = px.bar(daily, x="date", y="transactions_count", text="transactions_count",
                  labels={"date":"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà","transactions_count":"Transactions"})
    fig3.update_traces(textposition='outside')
    st.plotly_chart(fig3, use_container_width=True)

    # 4) Monthly overview
    st.markdown("#### ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    tmp = merged.copy()
    tmp["month"] = pd.to_datetime(tmp["date"]).dt.to_period("M").astype(str)
    monthly = tmp.groupby("month").agg({"transactions_count":"sum","riders_active":"sum"}).reset_index()
    fig4 = px.bar(monthly, x="month", y="transactions_count", text="transactions_count",
                  labels={"month":"‡πÄ‡∏î‡∏∑‡∏≠‡∏ô","transactions_count":"Transactions"})
    fig4.update_traces(textposition='outside')
    st.plotly_chart(fig4, use_container_width=True)

    # Table: Transactions by SiteControl
    st.markdown("#### ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Transection ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ")
    st.dataframe(grp_site.rename(columns={
        "site_control":"‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ",
        "transactions_count":"Transactions",
        "riders_active":"Rider Active",
        "riders_count":"Riders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    }), use_container_width=True)

# =========================
# ---------- ADMIN ---------
# =========================
st.markdown("---")
st.markdown("## üõ†Ô∏è ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (Admin)")
if not st.session_state.auth["ok"]:
    st.warning("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≤‡∏á Sidebar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
else:
    tabs = st.tabs(["‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Transaction", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Admin)"])

    # ----- Manage Hospitals -----
    with tabs[0]:
        st.markdown("### ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•")
        with st.expander("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•"):
            edit_mode = st.checkbox("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà", value=False)
            if edit_mode and not hospitals_df.empty:
                row = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", hospitals_df["name"].tolist())
                row_data = hospitals_df[hospitals_df["name"]==row].iloc[0].to_dict()
            else:
                row_data = {"id": str(uuid.uuid4())}

            name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", value=row_data.get("name", ""))
            province = st.selectbox("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", list(TH_PROVINCES.keys()), index= list(TH_PROVINCES.keys()).index(row_data.get("province","‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà")) if row_data.get("province") in TH_PROVINCES else 0)
            region = TH_PROVINCES.get(province, "‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á")
            st.info(f"‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ: **{region}** (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)")
            site = st.selectbox("SiteControl (‡∏ó‡∏µ‡∏°)", SITE_CONTROL_CHOICES, index=max(0, SITE_CONTROL_CHOICES.index(row_data.get("site_control","‡∏ó‡∏µ‡∏°‡πÉ‡∏ï‡πâ")) if row_data.get("site_control") in SITE_CONTROL_CHOICES else 0))
            system = st.selectbox("‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", SYSTEM_CHOICES, index=max(0, SYSTEM_CHOICES.index(row_data.get("system_type","HOSxpV4")) if row_data.get("system_type") in SYSTEM_CHOICES else 0))
            service_models = st.multiselect("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô)", SERVICE_MODEL_CHOICES, default=[x for x in (row_data.get("service_models") or []) if x in SERVICE_MODEL_CHOICES])
            riders_count = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Rider (Capacity)", min_value=0, step=1, value=int(row_data.get("riders_count",0)))

            c1, c2 = st.columns(2)
            with c1:
                if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•"):
                    payload = {
                        "id": row_data.get("id", str(uuid.uuid4())),
                        "name": name.strip(),
                        "province": province,
                        "region": region,
                        "site_control": site,
                        "system_type": system,
                        "service_models": service_models,
                        "riders_count": int(riders_count)
                    }
                    if not name.strip():
                        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•")
                    else:
                        if edit_mode:
                            sb.table("hospitals").update(payload).eq("id", row_data["id"]).execute()
                            st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡πâ‡∏ß")
                        else:
                            sb.table("hospitals").insert(payload).execute()
                            st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡πâ‡∏ß")
                        reload_all()
            with c2:
                if edit_mode and st.button("üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•"):
                    sb.table("hospitals").delete().eq("id", row_data["id"]).execute()
                    st.success("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                    reload_all()

        st.markdown("#### ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•")
        st.dataframe(hospitals_df, use_container_width=True)

    # ----- Manage Transactions -----
    with tabs[1]:
        st.markdown("### Transaction ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô")
        if hospitals_df.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏Å‡πà‡∏≠‡∏ô")
        else:
            hosp_map = {r["name"]: r["id"] for _, r in hospitals_df.iterrows()}
            with st.expander("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Transaction ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"):
                hname = st.selectbox("‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", list(hosp_map.keys()), key="tx_add_h")
                tx_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=date.today(), key="tx_add_d")
                tx_num = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Transactions", min_value=0, step=1, key="tx_add_n")
                riders_active = st.number_input("Rider Active", min_value=0, step=1, key="tx_add_ra")
                if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Transaction"):
                    sb.table("transactions").insert({
                        "id": str(uuid.uuid4()),
                        "hospital_id": hosp_map[hname],
                        "date": tx_date.isoformat(),
                        "transactions_count": int(tx_num),
                        "riders_active": int(riders_active)
                    }).execute()
                    st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß")
                    reload_all()

            st.markdown("#### ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Transaction (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)")
            # Editable grid-like approach
            # For inline edit per row, provide a selector then allow edit
            tx_view = merged[["date","name","transactions_count","riders_active","hospital_id","id" if "id" in merged.columns else "hospital_id"]].copy()
            if "id" not in tx_view.columns:
                # reload raw to ensure we have transaction id
                raw_tx = load_df("transactions")
                tx_view = raw_tx.merge(hospitals_df[["id","name"]], left_on="hospital_id", right_on="id", suffixes=("","_h"))
                tx_view = tx_view[["id","date","name","transactions_count","riders_active","hospital_id"]]

            st.dataframe(tx_view.rename(columns={"name":"‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•","date":"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà","transactions_count":"Transactions","riders_active":"Rider Active"}), use_container_width=True)

            with st.expander("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / ‡∏•‡∏ö Transaction"):
                raw_tx = load_df("transactions")
                if raw_tx.empty:
                    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                else:
                    pick_id = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", raw_tx["id"].tolist())
                    row = raw_tx[raw_tx["id"]==pick_id].iloc[0].to_dict()
                    h_id_to_name = {r["id"]: r["name"] for _, r in hospitals_df.iterrows()}
                    hsel = st.selectbox("‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", list(hosp_map.keys()), index=list(hosp_map.keys()).index(h_id_to_name.get(row["hospital_id"], list(hosp_map.keys())[0])))
                    dsel = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=pd.to_datetime(row["date"]).date())
                    nsel = st.number_input("Transactions", min_value=0, step=1, value=int(row.get("transactions_count",0)))
                    rsel = st.number_input("Rider Active", min_value=0, step=1, value=int(row.get("riders_active",0)))
                    c3, c4 = st.columns(2)
                    with c3:
                        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", key="btn_tx_save"):
                            sb.table("transactions").update({
                                "hospital_id": hosp_map[hsel],
                                "date": dsel.isoformat(),
                                "transactions_count": int(nsel),
                                "riders_active": int(rsel)
                            }).eq("id", pick_id).execute()
                            st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß")
                            reload_all()
                    with c4:
                        if st.button("‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ", key="btn_tx_del"):
                            sb.table("transactions").delete().eq("id", pick_id).execute()
                            st.success("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                            reload_all()

    # ----- Manage Admins -----
    with tabs[2]:
        st.markdown("### ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (Admins)")
        admins_df = load_df("admins")
        st.dataframe(admins_df[["username","created_at"]] if "created_at" in admins_df.columns else admins_df[["username"]], use_container_width=True)

        with st.expander("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÉ‡∏´‡∏°‡πà"):
            nu = st.text_input("Username ‡πÉ‡∏´‡∏°‡πà")
            npw = st.text_input("Password", type="password")
            if st.button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"):
                if not nu or not npw:
                    st.error("‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
                elif any(admins_df["username"].str.lower() == nu.lower()):
                    st.error("‡∏°‡∏µ username ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    sb.table("admins").insert({
                        "id": str(uuid.uuid4()),
                        "username": nu,
                        "password_hash": hash_pw(npw)
                    }).execute()
                    st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡πâ‡∏ß")
                    reload_all()

        with st.expander("‚úèÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô / ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"):
            if admins_df.empty:
                st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")
            else:
                selu = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", admins_df["username"].tolist())
                newpw = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")
                c5, c6 = st.columns(2)
                with c5:
                    if st.button("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"):
                        if not newpw:
                            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà")
                        else:
                            sb.table("admins").update({"password_hash": hash_pw(newpw)}).eq("username", selu).execute()
                            st.success("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
                            reload_all()
                with c6:
                    if st.button("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"):
                        sb.table("admins").delete().eq("username", selu).execute()
                        st.success("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                        reload_all()

# =========================
# ---------- FOOTER --------
# =========================
st.markdown("---")
st.caption("Telemedicine Dashboard ‚Ä¢ pastel theme ‚Ä¢ built with Streamlit + Supabase")


# ==================================================================
# --------------------------- SCHEMA -------------------------------
# ==================================================================
# Run this in Supabase SQL Editor once.
SCHEMA_SQL = r"""
-- Admins
create table if not exists public.admins (
  id uuid primary key,
  username text unique not null,
  password_hash text not null,
  created_at timestamp with time zone default now()
);

-- Hospitals
create table if not exists public.hospitals (
  id uuid primary key,
  name text unique not null,
  province text not null,
  region text not null,
  site_control text not null check (site_control in ('‡∏ó‡∏µ‡∏°‡πÉ‡∏ï‡πâ','‡∏ó‡∏µ‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏ó‡∏µ‡∏°‡∏≠‡∏µ‡∏™‡∏≤‡∏ô')),
  system_type text not null check (system_type in ('HOSxpV4','HOSxpV3','WebPortal')),
  service_models text[] not null default '{}',
  riders_count integer not null default 0,
  created_at timestamp with time zone default now()
);

-- Transactions (daily)
create table if not exists public.transactions (
  id uuid primary key,
  hospital_id uuid references public.hospitals(id) on delete cascade,
  date date not null,
  transactions_count integer not null default 0,
  riders_active integer not null default 0,
  created_at timestamp with time zone default now()
);

-- Helpful indexes
create index if not exists idx_tx_hospital_date on public.transactions(hospital_id, date);
create index if not exists idx_hosp_site on public.hospitals(site_control);

-- RLS (for anon usage). For simplicity we allow full read/write from anon. Restrict in production.
alter table public.admins enable row level security;
alter table public.hospitals enable row level security;
alter table public.transactions enable row level security;

drop policy if exists p_admins_all on public.admins;
drop policy if exists p_hosp_all on public.hospitals;
drop policy if exists p_tx_all on public.transactions;

create policy p_admins_all on public.admins for all using (true) with check (true);
create policy p_hosp_all on public.hospitals for all using (true) with check (true);
create policy p_tx_all on public.transactions for all using (true) with check (true);
"""

# ==================================================================
# ------------------------ TH_PROVINCES ----------------------------
# ==================================================================
# If you want the full dict in one place for reuse:
TH_PROVINCES_FULL_JSON = json.dumps(TH_PROVINCES, ensure_ascii=False)
