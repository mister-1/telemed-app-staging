# Telemedicine Transactions Dashboard ‚Äî Upgraded v2 (Streamlit + Supabase)
# - Pie: ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
# - Horizontal bar + scroll + ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
# - Daily trend: line + ‡πÅ‡∏Å‡∏ô X ‡πÄ‡∏õ‡πá‡∏ô "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 18/8/25"
# - ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏±‡∏ô
# - ‡πÅ‡∏Å‡πâ Drill-down ‡πÉ‡∏´‡πâ robust (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/NaN)
# - ‡∏õ‡∏∏‡πà‡∏° üñ®Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô PDF/‡∏†‡∏≤‡∏û (print ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤)
# - ‡∏Ñ‡∏á‡∏´‡∏ô‡πâ‡∏≤ Admin ‡∏Ñ‡∏£‡∏ö: Hospitals / Transactions / Admins / Settings+Seed

import os, uuid, json, bcrypt, requests
import pandas as pd
import plotly.express as px
from io import StringIO
from datetime import date, timedelta
from typing import Dict, Any

import streamlit as st
import streamlit.components.v1 as components
from supabase import create_client, Client

# ============= THEME =============
PASTEL_BG = '#F7F8FB'; PASTEL_CARD = '#FFFFFF'
PASTEL_ACCENT = '#A7C7E7'; PASTEL_ACCENT_3 = '#B6E2D3'
PASTEL_TEXT = '#3E4B6D'
DARK_BG = '#0F172A'; DARK_CARD = '#111827'; DARK_TEXT = '#E5E7EB'

st.set_page_config(page_title='Telemedicine Transactions', page_icon='üìä', layout='wide')

# ========== ENV & SUPABASE =========
SUPABASE_URL = os.getenv('SUPABASE_URL', '')
SUPABASE_KEY = os.getenv('SUPABASE_KEY', '')

@st.cache_resource(show_spinner=False)
def get_client() -> Client:
    if not SUPABASE_URL or not SUPABASE_KEY:
        st.error('‚ùå Missing SUPABASE_URL or SUPABASE_KEY environment variable.')
        st.stop()
    return create_client(SUPABASE_URL, SUPABASE_KEY)

sb: Client = get_client()

# ============= CONSTANTS ===========
SITE_CONTROL_CHOICES = ['‡∏ó‡∏µ‡∏°‡πÉ‡∏ï‡πâ', '‡∏ó‡∏µ‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', '‡∏ó‡∏µ‡∏°‡∏≠‡∏µ‡∏™‡∏≤‡∏ô']
SYSTEM_CHOICES = ['HOSxpV4', 'HOSxpV3', 'WebPortal']
SERVICE_MODEL_CHOICES = ['Rider', 'App', 'Station to Station']

TH_PROVINCES: Dict[str, str] = {
  '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á','‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å','‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô',
  '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å','‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å',
  '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å','‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á','‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏ä‡∏∏‡∏°‡∏û‡∏£':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ',
  '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏ï‡∏£‡∏±‡∏á':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏ï‡∏£‡∏≤‡∏î':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å',
  '‡∏ï‡∏≤‡∏Å':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å','‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á','‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á','‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô',
  '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á',
  '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏ô‡πà‡∏≤‡∏ô':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô',
  '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á','‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å','‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å','‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ',
  '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á','‡∏û‡∏∞‡πÄ‡∏¢‡∏≤':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏û‡∏±‡∏á‡∏á‡∏≤':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ',
  '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å','‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠',
  '‡πÅ‡∏û‡∏£‡πà':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô',
  '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏¢‡∏∞‡∏•‡∏≤':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏¢‡πÇ‡∏™‡∏ò‡∏£':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô',
  '‡∏£‡∏∞‡∏ô‡∏≠‡∏á':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏£‡∏∞‡∏¢‡∏≠‡∏á':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å','‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å','‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á',
  '‡∏•‡∏≥‡∏õ‡∏≤‡∏á':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏•‡∏≥‡∏û‡∏π‡∏ô':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡πÄ‡∏•‡∏¢':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô',
  '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏™‡∏á‡∏Ç‡∏•‡∏≤':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏™‡∏ï‡∏π‡∏•':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á',
  '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á','‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á','‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß':'‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å','‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á',
  '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á','‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á','‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ':'‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ',
  '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á',
  '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå':'‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á',
  '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ':'‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô'
}

# ============ SETTINGS (KV) ============
def get_setting(key: str, default: Any=None) -> Any:
    try:
        res = sb.table('settings').select('*').eq('key', key).execute().data
        if res: return res[0]['value']
    except Exception: pass
    return default

def set_setting(key: str, value: Any):
    sb.table('settings').upsert({'key': key, 'value': value}).execute()

DEFAULT_TARGETS = {'daily_transactions': 50, 'utilization_alert_pct': 90}
targets = get_setting('targets', DEFAULT_TARGETS) or DEFAULT_TARGETS
line_cfg = get_setting('line_notify', {'enabled': False, 'token': ''}) or {'enabled': False, 'token': ''}

# ============ HELPERS ============
def hash_pw(pw: str) -> str:
    return bcrypt.hashpw(pw.encode(), bcrypt.gensalt()).decode()

def verify_pw(pw: str, hashed: str) -> bool:
    try: return bcrypt.checkpw(pw.encode(), hashed.encode())
    except Exception: return False

@st.cache_data(ttl=60, show_spinner=False)
def load_df(table: str) -> pd.DataFrame:
    return pd.DataFrame(sb.table(table).select('*').execute().data)

def force_rerun():
    try: st.rerun()
    except Exception:
        try: st.experimental_rerun()
        except Exception: pass

def reload_all():
    load_df.clear(); force_rerun()

def send_line_notify(message: str):
    if not isinstance(line_cfg, dict): return
    if line_cfg.get('enabled') and line_cfg.get('token'):
        try:
            requests.post('https://notify-api.line.me/api/notify',
                          headers={'Authorization': f"Bearer {line_cfg['token']}"},
                          data={'message': message}, timeout=5)
        except Exception: pass

def ensure_default_admin():
    rows = sb.table('admins').select('username').eq('username','telemed').execute().data
    if not rows:
        sb.table('admins').insert({'id':str(uuid.uuid4()),'username':'telemed','password_hash':hash_pw('Telemed@DHI')}).execute()
ensure_default_admin()

# ============ THEME / CSS ============
if 'ui' not in st.session_state: st.session_state['ui'] = {'dark': False}
with st.sidebar:
    st.markdown('### üé® Appearance')
    st.session_state.ui['dark'] = st.checkbox('‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏∑‡∏î (Dark mode)', value=st.session_state.ui['dark'])

BG, CARD, TEXT = (DARK_BG, DARK_CARD, DARK_TEXT) if st.session_state.ui['dark'] else (PASTEL_BG, PASTEL_CARD, PASTEL_TEXT)

st.markdown(f"""
<style>
  @import url('https://fonts.googleapis.com/css2?family=Kanit:wght@400;600&display=swap');
  :root {{ --bg:{BG}; --card:{CARD}; --text:{TEXT}; }}
  html, body, [class*='st-'] {{ font-family:'Kanit',system-ui,-apple-system,Segoe UI,sans-serif; }}
  .stApp {{ background-color:var(--bg); }}
  .metric-card {{ background:var(--card); color:var(--text); padding:1rem; border-radius:16px; box-shadow:0 1px 8px rgba(0,0,0,.05);}}
</style>
""", unsafe_allow_html=True)

px.defaults.template = 'plotly_white'
px.defaults.color_discrete_sequence = ['#A7C7E7','#F8C8DC','#B6E2D3','#FDE2B3','#EAD7F7','#CDE5F0','#FFD6E8']

def prettify_bar(fig, y_title=''):
    fig.update_traces(texttemplate='%{text:,}', textposition='outside', cliponaxis=False,
                      hovertemplate='<b>%{x}</b><br>‡∏Ñ‡πà‡∏≤: %{y:,}<extra></extra>')
    fig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide', yaxis_title=y_title,
                      margin=dict(t=30,r=20,b=40,l=50))
    return fig

# ============ AUTH ============
if 'auth' not in st.session_state: st.session_state['auth']={'ok':False,'user':None}
with st.sidebar:
    st.markdown('## üîê Admin Login')
    if not st.session_state.auth['ok']:
        with st.form('login_form'):
            u = st.text_input('Username'); p = st.text_input('Password', type='password')
            if st.form_submit_button('Login'):
                rows = sb.table('admins').select('*').eq('username', u).execute().data
                if rows and verify_pw(p, rows[0]['password_hash']):
                    st.session_state.auth={'ok':True,'user':rows[0]['username']}; force_rerun()
                else: st.error('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    else:
        st.write(f"‚úÖ Logged in as **{st.session_state.auth['user']}**")
        if st.button('Logout'): st.session_state.auth={'ok':False,'user':None}; force_rerun()

# ============ FILTERS ============
hospitals_df = load_df('hospitals')
colF1, colF2, colF3, colF4 = st.columns([1,1,2,1])
with colF1:
    hosp_names = ['(‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)'] + sorted(hospitals_df.get('name', pd.Series(dtype=str)).dropna().unique().tolist())
    selected_hospital = st.selectbox('‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', hosp_names)
with colF2:
    today = date.today(); start_default = today - timedelta(days=30)
    date_range = st.date_input('‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', value=(start_default, today))
    start_date, end_date = (date_range if isinstance(date_range, tuple) else (start_default, today))
with colF3:
    site_filter = st.multiselect('‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ (SiteControl)', SITE_CONTROL_CHOICES)
with colF4:
    components.html('<button onclick="parent.window.print()">üñ®Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô PDF/‡∏†‡∏≤‡∏û</button>', height=50)

# ============ DATA ============
transactions_df = load_df('transactions')
if not transactions_df.empty:
    transactions_df['date'] = pd.to_datetime(transactions_df['date']).dt.date
    mask = (transactions_df['date'] >= start_date) & (transactions_df['date'] <= end_date)
    transactions_df = transactions_df.loc[mask].copy()

if not hospitals_df.empty and not transactions_df.empty:
    merged = transactions_df.merge(hospitals_df, left_on='hospital_id', right_on='id', how='left', suffixes=('', '_h'))
else:
    merged = pd.DataFrame(columns=['date','hospital_id','transactions_count','riders_active','name','site_control','province','region','riders_count'])

if selected_hospital != '(‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)': merged = merged.loc[merged['name'] == selected_hospital]
if site_filter: merged = merged.loc[merged['site_control'].isin(site_filter)]

# ============ KPIs ============
st.markdown('### üìà ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° (Overview)')
colK1, colK2, colK3, colK4 = st.columns(4)
total_tx = int(merged['transactions_count'].sum()) if not merged.empty else 0
unique_h = merged['hospital_id'].nunique() if not merged.empty else 0
sum_riders_active = int(merged['riders_active'].sum()) if not merged.empty else 0
sum_riders_capacity = int(merged['riders_count'].fillna(0).sum()) if not merged.empty else 0
with colK1: st.markdown(f"<div class='metric-card'><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</b><h2>{total_tx:,}</h2></div>", unsafe_allow_html=True)
with colK2: st.markdown(f"<div class='metric-card'><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</b><h2>{unique_h}</h2></div>", unsafe_allow_html=True)
with colK3: st.markdown(f"<div class='metric-card'><b>Rider Active (‡∏£‡∏ß‡∏°)</b><h2>{sum_riders_active:,}</h2></div>", unsafe_allow_html=True)
with colK4: st.markdown(f"<div class='metric-card'><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Rider (Capacity)</b><h2>{sum_riders_capacity:,}</h2></div>", unsafe_allow_html=True)

# ============ CHARTS ============
if merged.empty:
    st.info('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Admin ‚ûú ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
else:
    # --- Pie by SiteControl ---
    st.markdown('#### ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ (‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°)')
    grp_site = merged.groupby('site_control').agg({'transactions_count':'sum','riders_active':'sum','riders_count':'sum'}).reset_index()
    fig_pie = px.pie(grp_site, names='site_control', values='transactions_count',
                     hole=0.3, labels={'site_control':'‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ','transactions_count':'Transactions'})
    fig_pie.update_traces(textposition='inside', textinfo='label+percent+value')
    st.plotly_chart(fig_pie, use_container_width=True)

    # --- Hospital overview horizontal bar + scroll + full screen ---
    st.markdown('#### ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)')
    grp_h = merged.groupby('name').agg({'transactions_count':'sum','riders_active':'sum','riders_count':'sum'}).reset_index().sort_values('transactions_count', ascending=True)
    fig_h = px.bar(grp_h, y='name', x='transactions_count', orientation='h', text='transactions_count',
                   labels={'name':'‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•','transactions_count':'Transactions'})
    fig_h.update_traces(textposition='outside')
    fig_h.update_layout(height=max(500, 30*len(grp_h)+200), margin=dict(l=120,r=40,t=30,b=40))
    st.markdown("[üîé ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠](?view=hospitals)", unsafe_allow_html=True)
    components.html(fig_h.to_html(include_plotlyjs='cdn', full_html=False), height=550, scrolling=True)

    # --- Daily trend line with Thai weekday label ---
    st.markdown('#### ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô)')
    daily = merged.groupby('date').agg({'transactions_count':'sum','riders_active':'sum'}).reset_index().sort_values('date')
    if not daily.empty:
        th_weekdays = ['‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå','‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£','‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò','‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ','‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå','‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå','‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå']
        def make_label(d):
            dts = pd.to_datetime(d)
            return f"{th_weekdays[dts.dayofweek]} {dts.day}/{dts.month}/{str(dts.year)[-2:]}"
        daily['label'] = daily['date'].apply(make_label)
        dm = daily.melt(id_vars=['date','label'], value_vars=['transactions_count','riders_active'],
                        var_name='metric', value_name='value')
        dm['metric'] = dm['metric'].map({'transactions_count':'Transactions','riders_active':'Rider Active'})
        fig_line = px.line(dm, x='label', y='value', color='metric', markers=True,
                           labels={'label':'‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ','value':'‡∏Ñ‡πà‡∏≤','metric':'‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î'})
        fig_line.update_traces(mode='lines+markers', hovertemplate='<b>%{x}</b><br>‡∏Ñ‡πà‡∏≤: %{y:,}<extra></extra>')
        fig_line.update_layout(xaxis_tickangle=-45, margin=dict(t=30,r=20,b=80,l=50))
        st.plotly_chart(fig_line, use_container_width=True)

    # --- Colored table by SiteControl ---
    st.markdown('#### ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Transection ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ (‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏±‡∏ô)')
    tbl = grp_site.rename(columns={'site_control':'‡∏ó‡∏µ‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ','transactions_count':'Transactions','riders_active':'Rider Active','riders_count':'Riders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'})
    try:
        st.table(tbl.style.background_gradient(cmap='YlGnBu', subset=['Transactions','Rider Active','Riders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î']))
    except Exception:
        st.dataframe(tbl, use_container_width=True)

# ============ FULLSCREEN VIEW ============
qp = st.experimental_get_query_params()
view_param = (qp.get('view', [None])[0] if isinstance(qp, dict) else None)
if view_param == 'hospitals' and not merged.empty:
    st.markdown('### ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠)')
    grp_h2 = merged.groupby('name').agg({'transactions_count':'sum','riders_active':'sum','riders_count':'sum'}).reset_index().sort_values('transactions_count', ascending=True)
    fig_full = px.bar(grp_h2, y='name', x='transactions_count', orientation='h', text='transactions_count',
                      labels={'name':'‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•','transactions_count':'Transactions'})
    fig_full.update_traces(textposition='outside')
    fig_full.update_layout(height=max(700, 35*len(grp_h2)+200), margin=dict(l=160,r=40,t=30,b=40))
    st.plotly_chart(fig_full, use_container_width=True)

# ============ DRILL-DOWN ============
st.markdown('---'); st.markdown('### üîé Drill-down ‡∏£‡∏≤‡∏¢‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•')
dd_col1, dd_col2 = st.columns([2,1])
with dd_col1:
    dd_hosp = st.selectbox('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', ['(‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)'] + sorted(hospitals_df.get('name', pd.Series(dtype=str)).dropna().unique().tolist()))
with dd_col2:
    show_util = st.checkbox('‡πÅ‡∏™‡∏î‡∏á Utilization %', value=True)

if dd_hosp and dd_hosp != '(‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)':
    dd_df = merged[merged['name'] == dd_hosp].copy()
    if dd_df.empty and not transactions_df.empty:
        dd_df = transactions_df.merge(hospitals_df, left_on='hospital_id', right_on='id', how='left')
        dd_df = dd_df[dd_df['name'] == dd_hosp].copy()
    if dd_df.empty:
        st.info('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')
    else:
        dd_df['riders_count'] = dd_df['riders_count'].fillna(0).astype(int)
        k1, k2, k3 = st.columns(3)
        with k1: st.metric('Transactions (‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)', f"{int(dd_df['transactions_count'].sum()):,}")
        with k2: st.metric('Rider Active ‡∏£‡∏ß‡∏°', f"{int(dd_df['riders_active'].sum()):,}")
        with k3: st.metric('Rider Capacity ‡∏£‡∏ß‡∏°', f"{int(dd_df['riders_count'].sum()):,}")

        d1 = dd_df.groupby('date').agg({'transactions_count':'sum','riders_active':'sum','riders_count':'sum'}).reset_index()
        d1m = d1.melt(id_vars=['date'], value_vars=['transactions_count','riders_active'], var_name='metric', value_name='value')
        d1m['metric'] = d1m['metric'].map({'transactions_count':'Transactions','riders_active':'Rider Active'})
        figd = px.bar(d1m, x='date', y='value', color='metric', text='value', labels={'date':'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà','value':'‡∏Ñ‡πà‡∏≤','metric':'‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î'})
        figd = prettify_bar(figd, y_title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'); st.plotly_chart(figd, use_container_width=True)

        dd_df['month'] = pd.to_datetime(dd_df['date']).dt.to_period('M').astype(str)  # FIX
        m1 = dd_df.groupby('month').agg({'transactions_count':'sum','riders_active':'sum'}).reset_index()
        m1m = m1.melt(id_vars=['month'], value_vars=['transactions_count','riders_active'], var_name='metric', value_name='value')
        m1m['metric'] = m1m['metric'].map({'transactions_count':'Transactions','riders_active':'Rider Active'})
        figm = px.bar(m1m, x='month', y='value', color='metric', text='value', labels={'month':'‡πÄ‡∏î‡∏∑‡∏≠‡∏ô','value':'‡∏Ñ‡πà‡∏≤','metric':'‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î'})
        figm = prettify_bar(figm, y_title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'); st.plotly_chart(figm, use_container_width=True)

        if show_util:
            util = dd_df.groupby('date').agg({'riders_active':'sum','riders_count':'sum'}).reset_index()
            util['Utilization %'] = (util['riders_active'] / util['riders_count']).replace([pd.NA, float('inf')], 0)*100
            figu = px.line(util, x='date', y='Utilization %', markers=True)
            figu.update_layout(yaxis_title='‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'); st.plotly_chart(figu, use_container_width=True)

# ================== ADMIN / SETTINGS / SEED ==================
st.markdown('---'); st.markdown('## üõ†Ô∏è ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (Admin / Settings)')
if not st.session_state.auth['ok']:
    st.warning('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≤‡∏á Sidebar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
else:
    tabs = st.tabs(['‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Transaction', '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•', '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ & ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á'])

    # ----- Hospitals -----
    with tabs[0]:
        st.markdown('### ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•')
        with st.expander('‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•'):
            edit_mode = st.checkbox('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà', value=False)
            if edit_mode and not hospitals_df.empty:
                row = st.selectbox('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', hospitals_df['name'].tolist())
                row_data = hospitals_df[hospitals_df['name']==row].iloc[0].to_dict()
            else:
                row_data = {'id': str(uuid.uuid4())}

            name = st.text_input('‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', value=row_data.get('name',''))
            provinces = list(TH_PROVINCES.keys())
            province_default = provinces.index(row_data.get('province')) if row_data.get('province') in provinces else 0
            province = st.selectbox('‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', provinces, index=province_default)
            region = TH_PROVINCES.get(province, '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á')
            st.info(f'‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ: **{region}** (‡∏à‡∏≤‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)')
            site = st.selectbox('SiteControl (‡∏ó‡∏µ‡∏°)', SITE_CONTROL_CHOICES,
                                index=SITE_CONTROL_CHOICES.index(row_data.get('site_control')) if row_data.get('site_control') in SITE_CONTROL_CHOICES else 0)
            system = st.selectbox('‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ', SYSTEM_CHOICES,
                                  index=SYSTEM_CHOICES.index(row_data.get('system_type')) if row_data.get('system_type') in SYSTEM_CHOICES else 0)
            service_models = st.multiselect('‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô)', SERVICE_MODEL_CHOICES,
                                            default=[x for x in (row_data.get('service_models') or []) if x in SERVICE_MODEL_CHOICES])
            riders_count = st.number_input('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Rider (Capacity)', min_value=0, step=1,
                                           value=int(row_data.get('riders_count',0)))

            c1, c2 = st.columns(2)
            with c1:
                if st.button('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•'):
                    payload = {
                        'id': row_data.get('id', str(uuid.uuid4())),
                        'name': name.strip(),
                        'province': province,
                        'region': region,
                        'site_control': site,
                        'system_type': system,
                        'service_models': service_models,
                        'riders_count': int(riders_count)
                    }
                    if not name.strip():
                        st.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•')
                    else:
                        if edit_mode:
                            sb.table('hospitals').update(payload).eq('id', row_data['id']).execute()
                            st.success('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡πâ‡∏ß')
                        else:
                            sb.table('hospitals').insert(payload).execute()
                            st.success('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡πâ‡∏ß')
                        reload_all()
            with c2:
                if edit_mode and st.button('üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•'):
                    sb.table('hospitals').delete().eq('id', row_data['id']).execute()
                    st.success('‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß'); reload_all()

        st.markdown('#### ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•')
        st.dataframe(hospitals_df, use_container_width=True)

    # ----- Transactions -----
    def validate_riders(hospital_id: str, riders_active: int) -> bool:
        try:
            rc = int(hospitals_df.loc[hospitals_df['id']==hospital_id, 'riders_count'].iloc[0])
            return riders_active <= rc
        except Exception:
            return True

    with tabs[1]:
        st.markdown('### Transaction ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô')
        if hospitals_df.empty:
            st.info('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏Å‡πà‡∏≠‡∏ô')
        else:
            hosp_map = {r['name']: r['id'] for _, r in hospitals_df.iterrows()}
            with st.expander('‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Transaction ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô'):
                hname = st.selectbox('‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', list(hosp_map.keys()))
                tx_date = st.date_input('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', value=date.today())
                tx_num = st.number_input('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Transactions', min_value=0, step=1)
                riders_active = st.number_input('Rider Active', min_value=0, step=1)
                if st.button('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Transaction'):
                    hid = hosp_map[hname]
                    if not validate_riders(hid, int(riders_active)):
                        st.error('Rider Active ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Capacity ‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏µ‡πâ')
                    else:
                        sb.table('transactions').insert({
                            'id': str(uuid.uuid4()),
                            'hospital_id': hid,
                            'date': tx_date.isoformat(),
                            'transactions_count': int(tx_num),
                            'riders_active': int(riders_active)
                        }).execute()
                        st.success('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß')
                        rc = int(hospitals_df.loc[hospitals_df['id']==hid, 'riders_count'].iloc[0])
                        util_pct = (int(riders_active)/rc*100) if rc else 0
                        if util_pct >= targets.get('utilization_alert_pct', 100):
                            send_line_notify(f"[Telemed] Utilization {util_pct:.0f}% ‚â• {targets.get('utilization_alert_pct')}% ({hname})")
                        reload_all()

            with st.expander('üì• ‡πÄ‡∏û‡∏¥‡πà‡∏° Transaction ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î CSV (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: hospital_name,date,transactions_count,riders_active)'):
                up = st.file_uploader('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .csv', type=['csv'])
                if up is not None:
                    dfu = pd.read_csv(up)
                    dfu.columns = [c.lower() for c in dfu.columns]
                    required = {'hospital_name','date','transactions_count','riders_active'}
                    if not required.issubset(set(dfu.columns)):
                        st.error('‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ: hospital_name, date(YYYY-MM-DD), transactions_count, riders_active')
                    else:
                        name_to_id = {r['name']: r['id'] for _, r in hospitals_df.iterrows()}
                        missing = [n for n in dfu['hospital_name'].unique() if n not in name_to_id]
                        if missing:
                            st.warning(f'‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: {missing}')
                        else:
                            rows = []
                            for _, r in dfu.iterrows():
                                hid = name_to_id[r['hospital_name']]
                                ra = int(r['riders_active'])
                                if not validate_riders(hid, ra):
                                    st.error(f'Rider Active ({ra}) ‡∏Ç‡∏≠‡∏á {r["hospital_name"]} ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Capacity'); rows=[]; break
                                rows.append({'id':str(uuid.uuid4()),'hospital_id':hid,'date':str(pd.to_datetime(r['date']).date()),
                                             'transactions_count':int(r['transactions_count']),'riders_active':ra})
                            if rows and st.button('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'):
                                sb.table('transactions').insert(rows).execute()
                                st.success(f'‡πÄ‡∏û‡∏¥‡πà‡∏° {len(rows)} ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'); reload_all()

        st.markdown('#### ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Transaction (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)')
        raw_tx = load_df('transactions')
        if raw_tx.empty:
            st.info('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Transaction ‚Äî ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Å‡πà‡∏≠‡∏ô')
            tx_view = pd.DataFrame(columns=['id','date','name','transactions_count','riders_active','hospital_id'])
        else:
            raw_tx['date'] = pd.to_datetime(raw_tx['date']).dt.date
            h_min = hospitals_df[['id','name']].rename(columns={'id':'hospital_id'})
            tx_view = raw_tx.merge(h_min, on='hospital_id', how='left')
            tx_view = tx_view[['id','date','name','transactions_count','riders_active','hospital_id']]

        st.dataframe(tx_view.rename(columns={'name':'‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•','date':'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà','transactions_count':'Transactions','riders_active':'Rider Active'}),
                     use_container_width=True)

        with st.expander('‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / ‡∏•‡∏ö Transaction'):
            raw_tx = load_df('transactions')
            if raw_tx.empty:
                st.info('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
            else:
                pick_id = st.selectbox('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', raw_tx['id'].tolist())
                row = raw_tx[raw_tx['id']==pick_id].iloc[0].to_dict()
                h_id_to_name = {r['id']: r['name'] for _, r in hospitals_df.iterrows()}
                hosp_map = {r['name']: r['id'] for _, r in hospitals_df.iterrows()}
                hsel = st.selectbox('‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', list(hosp_map.keys()),
                                    index=list(hosp_map.keys()).index(h_id_to_name.get(row['hospital_id'], list(hosp_map.keys())[0])))
                dsel = st.date_input('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', value=pd.to_datetime(row['date']).date())
                nsel = st.number_input('Transactions', min_value=0, step=1, value=int(row.get('transactions_count',0)))
                rsel = st.number_input('Rider Active', min_value=0, step=1, value=int(row.get('riders_active',0)))
                c3, c4 = st.columns(2)
                with c3:
                    if st.button('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'):
                        hid = hosp_map[hsel]
                        if not validate_riders(hid, int(rsel)):
                            st.error('Rider Active ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Capacity')
                        else:
                            sb.table('transactions').update({'hospital_id':hid,'date':dsel.isoformat(),
                                                             'transactions_count':int(nsel),'riders_active':int(rsel)}).eq('id', pick_id).execute()
                            st.success('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß'); reload_all()
                with c4:
                    if st.button('‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ'):
                        sb.table('transactions').delete().eq('id', pick_id).execute()
                        st.success('‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß'); reload_all()

    # ----- Admins -----
    with tabs[2]:
        st.markdown('### ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (Admins)')
        admins_df = load_df('admins')
        if 'created_at' in admins_df.columns:
            st.dataframe(admins_df[['username','created_at']], use_container_width=True)
        else:
            st.dataframe(admins_df[['username']], use_container_width=True)

        with st.expander('‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÉ‡∏´‡∏°‡πà'):
            nu = st.text_input('Username ‡πÉ‡∏´‡∏°‡πà')
            npw = st.text_input('Password', type='password')
            if st.button('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•'):
                if not nu or not npw:
                    st.error('‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö')
                elif not admins_df.empty and any(admins_df['username'].str.lower() == nu.lower()):
                    st.error('‡∏°‡∏µ username ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß')
                else:
                    sb.table('admins').insert({'id':str(uuid.uuid4()),'username':nu,'password_hash':hash_pw(npw)}).execute()
                    st.success('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡πâ‡∏ß'); reload_all()

        with st.expander('‚úèÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô / ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•'):
            if admins_df.empty:
                st.info('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•')
            else:
                selu = st.selectbox('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', admins_df['username'].tolist())
                newpw = st.text_input('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà', type='password')
                c5, c6 = st.columns(2)
                with c5:
                    if st.button('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'):
                        if not newpw: st.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà')
                        else:
                            sb.table('admins').update({'password_hash':hash_pw(newpw)}).eq('username', selu).execute()
                            st.success('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'); reload_all()
                with c6:
                    if st.button('‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•'):
                        sb.table('admins').delete().eq('username', selu).execute()
                        st.success('‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß'); reload_all()

    # ----- Settings & Seed -----
    with tabs[3]:
        st.markdown('### ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ / LINE Notify / ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á')
        tg1, tg2 = st.columns(2)
        with tg1:
            daily_target = st.number_input('‡πÄ‡∏õ‡πâ‡∏≤‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (Transactions ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô)', min_value=0, step=1,
                                           value=int(targets.get('daily_transactions', 50)))
        with tg2:
            util_thresh = st.number_input('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Utilization ‚â• (%)', min_value=0, max_value=100, step=1,
                                          value=int(targets.get('utilization_alert_pct', 90)))
        if st.button('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢'):
            set_setting('targets', {'daily_transactions': int(daily_target), 'utilization_alert_pct': int(util_thresh)})
            st.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß'); reload_all()

        st.markdown('#### LINE Notify (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)')
        en_line = st.checkbox('‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ LINE Notify', value=bool(line_cfg.get('enabled')))
        token = st.text_input('LINE Notify Token', value=line_cfg.get('token',''), type='password')
        if st.button('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE'):
            set_setting('line_notify', {'enabled': bool(en_line), 'token': token.strip()})
            st.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å LINE Notify ‡πÅ‡∏•‡πâ‡∏ß'); reload_all()

        st.markdown('#### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Seed/Reset)')
        cseed, creset = st.columns(2)
        with cseed:
            if st.button('‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (5 ‡∏£‡∏û. x 3 ‡∏ß‡∏±‡∏ô)'):
                demo_hosps = [
                    ('‡∏£‡∏û.‡∏´‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà','‡∏™‡∏á‡∏Ç‡∏•‡∏≤','‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏ó‡∏µ‡∏°‡πÉ‡∏ï‡πâ','WebPortal',['Rider','App','Station to Station'],5),
                    ('‡∏£‡∏û.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà','‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà','‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','‡∏ó‡∏µ‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','HOSxpV4',['Rider','Station to Station'],7),
                    ('‡∏£‡∏û.‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô','‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô','‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','‡∏ó‡∏µ‡∏°‡∏≠‡∏µ‡∏™‡∏≤‡∏ô','HOSxpV3',['App'],4),
                    ('‡∏£‡∏û.‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ','‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ','‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å','‡∏ó‡∏µ‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡∏≠','WebPortal',['Rider','App'],6),
                    ('‡∏£‡∏û.‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä','‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä','‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ','‡∏ó‡∏µ‡∏°‡πÉ‡∏ï‡πâ','HOSxpV4',['Rider','App'],6),
                ]
                name_to_id = {}
                for n,prov,reg,site,sys,models,rc in demo_hosps:
                    exist = sb.table('hospitals').select('*').eq('name', n).execute().data
                    if exist: hid = exist[0]['id']
                    else:
                        hid = str(uuid.uuid4())
                        sb.table('hospitals').insert({'id':hid,'name':n,'province':prov,'region':reg,'site_control':site,'system_type':sys,'service_models':models,'riders_count':rc}).execute()
                    name_to_id[n]=hid
                days = [date.today()-timedelta(days=2), date.today()-timedelta(days=1), date.today()]
                demo_rows = []
                import random
                for n,hid in name_to_id.items():
                    for d in days:
                        demo_rows.append({'id':str(uuid.uuid4()),'hospital_id':hid,'date':d.isoformat(),
                                          'transactions_count':random.randint(20,60),'riders_active':random.randint(2,7)})
                if demo_rows: sb.table('transactions').insert(demo_rows).execute()
                st.success('‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'); reload_all()
        with creset:
            if st.button('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á'):
                target_names = ['‡∏£‡∏û.‡∏´‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà','‡∏£‡∏û.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà','‡∏£‡∏û.‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô','‡∏£‡∏û.‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ','‡∏£‡∏û.‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä']
                ids = sb.table('hospitals').select('id').in_('name', target_names).execute().data
                ids = [r['id'] for r in ids]
                if ids:
                    for hid in ids:
                        sb.table('transactions').delete().eq('hospital_id', hid).execute()
                    sb.table('hospitals').delete().in_('id', ids).execute()
                st.success('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß'); reload_all()

st.markdown('---')
st.caption('Telemedicine Dashboard ‚Ä¢ pastel/dark ‚Ä¢ Streamlit + Supabase')
